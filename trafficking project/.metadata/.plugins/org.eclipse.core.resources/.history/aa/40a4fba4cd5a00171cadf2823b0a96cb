package com.example.Reel_Gym;

import com.example.Reel_Gym.R;

import android.annotation.SuppressLint;
import android.app.Activity;
import android.content.Intent;
import android.os.Bundle;
import android.view.View;
import android.view.View.OnClickListener;
import android.widget.Button;
import android.bluetooth.BluetoothAdapter;
import android.bluetooth.BluetoothDevice;
import android.bluetooth.BluetoothSocket;
import android.content.Context;
import android.net.Uri;
import android.os.Environment;
import android.os.Handler;
import android.telephony.PhoneStateListener;
import android.telephony.TelephonyManager;
import android.util.Log;
import android.view.WindowManager;
import android.widget.TextView;
import android.widget.Toast;
import java.io.File;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.InputStream;
import java.io.OutputStream;
import java.io.OutputStreamWriter;
import java.util.UUID;
import java.util.Date;
import java.text.DateFormat;
import java.text.SimpleDateFormat;


public class Workout extends Activity {

    private Button btn_Goback;
    final Context context = this;
    private Button btn;
    int call;
    int k = 0;
//    int pause = 0;
    int pause = 1;   //original
    String baseFolder;

    DateFormat dateFormat = new SimpleDateFormat("MM/dd/yyyy HH:mm:ss");
    Date date = new Date();

    Button btnstart, btnstop;
    TextView sensorView0;
    Handler bluetoothIn;
    boolean clicked = true;

    byte[] Test_send_to_HC05 = {-18,-79,16,56,56,-1,-4,-1,-1,-86};     //Test_send_to_HC05[20]={0xEE,0xB1,0x10,0x38,0x38,0xFF,0xFC,0xFF,0xFF,0xaa};
    byte[] Start_Recording = {-18,-79,17,0,6,0,5,-1,-4,-1,-1};	      //开始记录锻炼数据 EE B1 11 00 06 00 05 ... FF FC FF FF
    byte[] Stop_Recording = {-18,-79,17,0,7,0,5,-1,-4,-1,-1};	      //暂停记录锻炼数据 EE B1 11 00 07 00 05 ... FF FC FF FF 
    	          
    final int handlerState = 0;        				 //used to identify handler message
    private BluetoothAdapter btAdapter = null;
    private BluetoothSocket btSocket = null;
    private StringBuilder recDataString = new StringBuilder();
    private byte[] readMessage = new byte[256];		//receiving buffer
    private ConnectedThread mConnectedThread;

    // SPP UUID service - this should work for most devices
    private static final UUID BTMODULEUUID = UUID.fromString("00001101-0000-1000-8000-00805F9B34FB");

    // String for MAC address
    private static String address;

    @Override
    public void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);

        setContentView(R.layout.workout);

        btnstart = (Button) findViewById(R.id.button20);
        btnstop = (Button) findViewById(R.id.button30);
        sensorView0 = (TextView) findViewById(R.id.textView50);
        btn_Goback=(Button)findViewById(R.id.button10);
        
        getWindow().addFlags(WindowManager.LayoutParams.FLAG_KEEP_SCREEN_ON);
//        btn = (Button) findViewById(R.id.call);
        PhoneCallListener phoneCallListener = new PhoneCallListener();
        TelephonyManager telManager = (TelephonyManager)
                this.getSystemService(Context.TELEPHONY_SERVICE);
        telManager.listen(phoneCallListener, PhoneStateListener.LISTEN_CALL_STATE);

        // add button listener
//        btn.setOnClickListener(new OnClickListener() {
//            @Override
//            public void onClick(View view) {
//                Intent phoneCallIntent = new Intent(Intent.ACTION_CALL);
//                phoneCallIntent.setData(Uri.parse("tel:3024653830"));
//                startActivity(phoneCallIntent);
//            }
//        });


        //Link the buttons and textViews to respective views
//        View rootView = inflater.inflate(R.layout.fragment_main2, container, false);

        if(Environment.getExternalStorageState().equals(Environment.MEDIA_MOUNTED)) {
            baseFolder = String.valueOf(Environment.getExternalStoragePublicDirectory(Environment.DIRECTORY_DOWNLOADS));
        }
        // revert to using internal storage (not sure if there's an equivalent to the above)
        else {
            baseFolder = context.getFilesDir().getAbsolutePath();
        }

/*        bluetoothIn = new Handler() {
            public void handleMessage(android.os.Message msg) {
               if (msg.what == handlerState && pause == 0) {					//if message is what we want
                    String readMessage = (String) msg.obj;                      // msg.arg1 = bytes from connect thread                   
                    recDataString.append(readMessage);      
                	String AX = recDataString.substring(0,6); 
                	sensorView0.setText(" " + AX );     
                    int endOfLineIndex = recDataString.indexOf("8");                    // determine the end-of-line
                    if (endOfLineIndex > 0) {                                           // make sure there data before ~                     
                    	String dataInPrint = recDataString.substring(0, endOfLineIndex);    // extract string
                        //txtString.setText("Data Received = " + dataInPrint);
                        int dataLength = dataInPrint.length();							//get length of data received
//                        txtStringLength.setText("String Length = " + String.valueOf(dataLength));
                        if (recDataString.charAt(0) == '1')								//if it starts with # we know it is what we are looking for
                        {

//                            String AcX = recDataString.substring(recDataString.indexOf("2")+2, recDataString.indexOf("7")-1);             //get sensor value from string between indices 1-5
                        	String AcX = recDataString.substring(1,7);                      
//                            call = Integer.parseInt(ledval);
                            sensorView0.setText(" Accel(x,y,z) = " + AcX );	//update the textviews with sensor values

                            try
                            {
                                File file = new File(baseFolder + File.separator + "data.txt");
                                file.getParentFile().mkdirs();
                                FileOutputStream os = new FileOutputStream(file,true);
//                                OutputStreamWriter fout= new OutputStreamWriter(openFileOutput("data.txt", Context.MODE_APPEND));
                                OutputStreamWriter fout = new OutputStreamWriter(os);

                                String linea = System.getProperty("line.separator");
                                if(k== 0){
                                    fout.write(linea+"");
                                    fout.write(linea+"time and date: "+ dateFormat.format(date));
                                    fout.write(linea+"");
                                    k++;
                                }
                                fout.write(linea+"accel(x,y,z): "+AcX);
                                fout.close();

                            }
                            catch (Exception ex)
                            {
                                Log.e("Ficheros", "Error al escribir fichero a memoria interna");
                            }

                        }
//                        if ((call == 2)){
//                            btnOff.performClick();
//                            call = 0;
//                            btncall.performClick();
//                        }
                        recDataString.delete(0, recDataString.length()); 					//clear all string data
                        dataInPrint = " ";
                    }
                }
            }
        };*/
        
      //开始记录锻炼数据 EE B1 11 00 06 00 05 ... FF FC FF FF
      //暂停记录锻炼数据 EE B1 11 00 07 00 05 ... FF FC FF FF 
      //发送编码器值EE B1 10 10 01 10 02....(30) ...FF FC FF FF aa
      //Test_send_to_HC05[20]={0xEE,0xB1,0x10,0x38,0x38,0xFF,0xFC,0xFF,0xFF,0xaa}; 
        
		bluetoothIn = new Handler() {
			public void handleMessage(android.os.Message msg) {
				if (msg.what == handlerState && pause == 0) {
					readMessage = (byte[]) msg.obj;
//					sensorView0.setText(" " + readMessage[0]+" " + readMessage[1]+" " + readMessage[2]+" " + readMessage[3]+" " + readMessage[4]+" " + readMessage[5]+" " + readMessage[6]+" " + readMessage[7]+" " + readMessage[8]+" " + readMessage[9]+" " + readMessage[10]+" " + readMessage[11]);
//					Log.d("ee b1 10","ee b1 10");
					int j = 0;
					int flag = 0;
					int flag2 = 0;
					int Index_start=0;
					int Index_end=0;
					int change=0;
					while (readMessage[j] != 0 && change==0) {
//package end***************							
						if (flag == 3) {                           
							if (flag2 == 3) {
								if(readMessage[j] == -1 ){
									flag2 = 4;
									Index_end=j-4;
								}
								else{
									flag2=0;
									Log.d("abort 4","abort 0xff");
								}
							}
							if (flag2 == 2) {
								if(readMessage[j] == -1 )
									flag2 = 3;
								else{
									flag2=0;
									Log.d("abort 3","abort 0xff");
								}
							}
							if (flag2 == 1) {
								if(readMessage[j] == -4 )  //0xfc can only be in decimal bytes
									flag2 = 2;
								else{
									flag2=0;
									Log.d("abort 2","abort 0xfc");
								}
							}
							if(flag2 == 0) 		// 0xff can only be in decimal bytes
								{
									if(readMessage[j] == -1 )
										flag2 = 1;
//									else
//									Log.d("abort 1","abort 0xff");									
								}

						}
//package head ***************				
						if (flag == 2) {
							if(readMessage[j] == 16 ){   //0x10 can only be in decimal bytes
									flag = 3;
									Index_start=j+1;
								}
							else{
								flag=0;
								Log.d("abort 0x10","abort 0x10");
							}
						}
						if (flag == 1) {
							if(readMessage[j] == -79 )   //0xb1 can only be in decimal bytes
								flag = 2;											
							else{
								flag=0;			
								Log.d("abort 0xb1","abort 0xb1");
							}
						}
						if (flag == 0) 		// 0xee can only be in decimal bytes
						{
							if (readMessage[j] == -18)
								flag = 1;
//							else
//								Log.d("abort 0xee", "abort 0xee");
						}
						if (flag == 3 && flag2 == 4 ) { // extract
																		// data
							Log.d("ee b1 10", "ee b1 10");
//							sensorView0.setText("***");
/*							change=1;
							if(readMessage[Index_start]==0 && readMessage[Index_start+1]==1 && readMessage[Index_start+2]==0 && readMessage[Index_start+3]==2){
								String readMessageDataPiece = new String(readMessage, 0, j + 1);   //00 01 00 02
								String Distance = readMessageDataPiece.substring(Index_start+3, Index_end);
								sensorView0.setText(" " + Distance);
								flag = 0;
								flag2 = 0;
//								break;
							}	*/				
						}
						j++;
					} 
					j = 0;
					flag = 0;
					flag2 = 0;
					Index_start=0;
					Index_end=0;
					change=0;
/*					for (int i = 0; i < 256; i++)
						// clear all data
						readMessage[i] = 0;*/
				}
			}
		};
        
        btAdapter = BluetoothAdapter.getDefaultAdapter();       // get Bluetooth adapter
        checkBTState();

        btn_Goback.setOnClickListener(new OnClickListener() {		
//			@Override
			public void onClick(View arg0) {
				Intent intentbutton=new Intent();
				intentbutton.setClass(Workout.this, Activity02.class);
				startActivity(intentbutton);
				finish();
			}
		});
        
        btnstart.setOnClickListener(new OnClickListener() {
            public void onClick(View v) {
                pause = 0;
                k = 0;
                Toast.makeText(getBaseContext(), "started recording", Toast.LENGTH_SHORT).show();
                clicked = false;
                mConnectedThread.write(Start_Recording);
            }
        });

        btnstop.setOnClickListener(new OnClickListener() {
            public void onClick(View v) {
                pause = 1;
                Toast.makeText(getBaseContext(), "stopped recorfing", Toast.LENGTH_SHORT).show();
                clicked = false;
                mConnectedThread.write(Stop_Recording);
                sensorView0.setText(" ");
            }
        });
    }

    // monitor phone call states
    private class PhoneCallListener extends PhoneStateListener {

        String TAG = "LOGGING PHONE CALL";

        private boolean phoneCalling = false;

        @Override
        public void onCallStateChanged(int state, String incomingNumber) {

            if (TelephonyManager.CALL_STATE_RINGING == state) {
                // phone ringing
                Log.i(TAG, "RINGING, number: " + incomingNumber);
            }

            if (TelephonyManager.CALL_STATE_OFFHOOK == state) {
                // active
                Log.i(TAG, "OFFHOOK");

                phoneCalling = true;
            }

            // When the call ends launch the main activity again
            if (TelephonyManager.CALL_STATE_IDLE == state) {

                Log.i(TAG, "IDLE");

                if (phoneCalling) {

                    Log.i(TAG, "restart app");

                    // restart app
                    Intent i = getBaseContext().getPackageManager()
                            .getLaunchIntentForPackage(
                                    getBaseContext().getPackageName());

                    i.addFlags(Intent.FLAG_ACTIVITY_CLEAR_TOP);
                    startActivity(i);

                    phoneCalling = false;
                }

            }
        }
    }

    private BluetoothSocket createBluetoothSocket(BluetoothDevice device) throws IOException {

        return  device.createRfcommSocketToServiceRecord(BTMODULEUUID);
        //creates secure outgoing connecetion with BT device using UUID
    }

    @Override
    public void onResume() {
        super.onResume();

        //Get MAC address from DeviceListActivity via intent
        Intent intent = getIntent();

        //Get the MAC address from the DeviceListActivty via EXTRA
        address = intent.getStringExtra(DeviceListActivity.EXTRA_DEVICE_ADDRESS);

        //create device and set the MAC address
        BluetoothDevice device = btAdapter.getRemoteDevice(address);

        try {
            btSocket = createBluetoothSocket(device);
        } catch (IOException e) {
            Toast.makeText(getBaseContext(), "Socket creation failed", Toast.LENGTH_LONG).show();
        }
        // Establish the Bluetooth socket connection.
        try
        {
            btSocket.connect();
        } catch (IOException e) {
            try
            {
                btSocket.close();
            } catch (IOException e2)
            {
                //insert code to deal with this
            }
        }
        mConnectedThread = new ConnectedThread(btSocket);
        mConnectedThread.start();

        //I send a character when resuming.beginning transmission to check device is connected
        //If it is not an exception will be thrown in the write method and finish() will be called
//        mConnectedThread.write("x");

    }

    @Override
    public void onPause()
    {
        super.onPause();
        try
        {
            //Don't leave Bluetooth sockets open when leaving activity
            btSocket.close();
        } catch (IOException e2) {
            //insert code to deal with this
        }
    }

    //Checks that the Android device Bluetooth is available and prompts to be turned on if off
    private void checkBTState() {

        if(btAdapter==null) {
            Toast.makeText(getBaseContext(), "Device does not support bluetooth", Toast.LENGTH_LONG).show();
        } else {
            if (btAdapter.isEnabled()) {
            } else {
                Intent enableBtIntent = new Intent(BluetoothAdapter.ACTION_REQUEST_ENABLE);
                startActivityForResult(enableBtIntent, 1);
            }
        }
    }

    //create new class for connect thread
    private class ConnectedThread extends Thread {
        private final InputStream mmInStream;
        private final OutputStream mmOutStream;

        //creation of the connect thread
        public ConnectedThread(BluetoothSocket socket) {
            InputStream tmpIn = null;
            OutputStream tmpOut = null;

            try {
                //Create I/O streams for connection
                tmpIn = socket.getInputStream();
                tmpOut = socket.getOutputStream();
            } catch (IOException e) { }

            mmInStream = tmpIn;
            mmOutStream = tmpOut;
        }


/*        public void run() {
            byte[] buffer = new byte[256];
            int bytes;

            // Keep looping to listen for received messages
            while (true) {
                try {
                    bytes = mmInStream.read(buffer);        	//read bytes from input buffer
                    String readMessage = new String(buffer, 0, bytes);
                    // Send the obtained bytes to the UI Activity via handler
                    bluetoothIn.obtainMessage(handlerState, bytes, -1, readMessage).sendToTarget();
                } catch (IOException e) {
                    break;
                }
            }
        }*/
        public void run() {
            byte[] buffer = new byte[256];
            int bytes;
            while (true) {
                try {
                    bytes = mmInStream.read(buffer);        	//read bytes from input buffer
                    // Send the obtained bytes to the UI Activity via handler
                    bluetoothIn.obtainMessage(handlerState, bytes, -1, buffer).sendToTarget();
                } catch (IOException e) {
                    break;
                }
            }
        }
        
        //write method
/*        public void write(String input) {
            byte[] msgBuffer = input.getBytes();           //converts entered String into bytes
            try {
                mmOutStream.write(msgBuffer);                //write bytes over BT connection via outstream
            } catch (IOException e) {
                //if you cannot write, close the application
                Toast.makeText(getBaseContext(), "Connection Failure", Toast.LENGTH_LONG).show();
                finish();

            }
        }*/
        public void write(byte[] msgBuffer) {
            try {
                mmOutStream.write(msgBuffer);                //write bytes over BT connection via outstream
            } catch (IOException e) {
                //if you cannot write, close the application
                Toast.makeText(getBaseContext(), "Connection Failure", Toast.LENGTH_LONG).show();
                finish();

            }
        }
    }
}